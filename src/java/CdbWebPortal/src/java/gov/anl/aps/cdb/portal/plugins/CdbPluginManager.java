/*
 * Copyright (c) UChicago Argonne, LLC. All rights reserved.
 * See LICENSE file.
 */
package gov.anl.aps.cdb.portal.plugins;

import gov.anl.aps.cdb.portal.model.db.entities.PropertyTypeHandler;
import gov.anl.aps.cdb.portal.model.db.entities.PropertyValue;
import gov.anl.aps.cdb.portal.model.jsf.handlers.PropertyTypeHandlerInterface;

import gov.anl.aps.cdb.portal.utilities.SessionUtility;
import java.io.Serializable;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;
import java.util.HashSet;

// Must be generated by tools/developer_tools/cdb_plugins
import gov.anl.aps.cdb.portal.plugins.support.PluginRegistrar;


/**
 *
 * @author djarosz
 */
@SessionScoped
@Named("cdbPluginManager")
public class CdbPluginManager implements Serializable {

    Set<PluginManagerBase> pluginManagerSet = null;
    
    private static CdbPluginManager apiInstance = null; 

    private Boolean displayMultiEditExtrasCatalog = null;
    private Boolean displayMultiEditExtrasInventory = null;

    public CdbPluginManager() {
        pluginManagerSet = new HashSet<>();
        PluginRegistrar.registerPlugins(this);
    }

    public static CdbPluginManager getInstance() {
        if (SessionUtility.runningFaces()) {
            return (CdbPluginManager) SessionUtility.findBean("cdbPluginManager");
        } else {
            if (apiInstance == null) {
                apiInstance = new CdbPluginManager(); 
            } 
            return apiInstance;
        }
    }

    /**
     * Adds the plug-in manager instance to registry for fetching plug-in
     * functionality.
     *
     * @param pluginManager
     */
    public void registerPlugin(PluginManagerBase pluginManager) {
        pluginManagerSet.add(pluginManager);
    }

    /**
     * Functionality returns a list of all property type handler names in
     * plug-ins.
     */
    public List<String> getAllPluginPropertyTypeHandlerNames() {
        List<String> propertyTypeHandlerNames = new ArrayList<>();

        for (PluginManagerBase pluginManager : pluginManagerSet) {
            PropertyTypeHandlerInterface pluginPropertyTypeHandler = pluginManager.getPluginPropertyTypeHandler();
            if (pluginPropertyTypeHandler != null) {
                propertyTypeHandlerNames.add(pluginPropertyTypeHandler.getName());
            }
        }
        return propertyTypeHandlerNames;
    }

    public PropertyTypeHandlerInterface getPropertyTypeHandler(String hanlderName) {
        PluginManagerBase pluginWithPropertyTypeHandler = getPluginManagerByPropertyTypeHandler(hanlderName);
        if (pluginWithPropertyTypeHandler != null) {
            return pluginWithPropertyTypeHandler.getPluginPropertyTypeHandler();
        }
        return null;
    }

    private PluginManagerBase getPluginManagerByPropertyTypeHandler(String propertyTypeHandlerName) {
        for (PluginManagerBase pluginManager : pluginManagerSet) {
            PropertyTypeHandlerInterface pluginPropertyTypeHandler = pluginManager.getPluginPropertyTypeHandler();
            if (pluginPropertyTypeHandler != null) {
                if (pluginPropertyTypeHandler.getName().equals(propertyTypeHandlerName)) {
                    return pluginManager;
                }
            }
        }
        return null;
    }

    public void loadInfoActionForPropertyValue(PropertyValue propertyValue) {
        if (propertyValue != null) {
            if (propertyValue.getPropertyType() != null) {
                PropertyTypeHandler propertyTypeHandler = propertyValue.getPropertyType().getPropertyTypeHandler();
                if (propertyTypeHandler != null) {
                    PluginManagerBase pluginManager = getPluginManagerByPropertyTypeHandler(propertyTypeHandler.getName());
                    pluginManager.performInfoActionLoad(propertyValue);
                }
            }
        }
    }

    public PluginManagerBase getPluginManagerByName(String pluginName) {
        for (PluginManagerBase pluginManager : pluginManagerSet) {
            if (pluginManager.getPluginName().equals(pluginName)) {
                return pluginManager;
            }
        }
        return null;
    }

    public boolean isDisplayMultiEditExtrasCatalog() {
        if (displayMultiEditExtrasCatalog == null) {
            displayMultiEditExtrasCatalog = false; 
            for (PluginManagerBase pluginManager : pluginManagerSet) {
                if (pluginManager.pluginHasCatalogMultiEditExtras()) {
                    displayMultiEditExtrasCatalog = true; 
                    break; 
                }
            }
        }
        return displayMultiEditExtrasCatalog;
    }

    public boolean isDisplayMultiEditExtrasInventory() {
        if (displayMultiEditExtrasInventory == null) {
            displayMultiEditExtrasInventory = false; 
            for (PluginManagerBase pluginManager : pluginManagerSet) {
                if (pluginManager.pluginHasInventoryMultiEditExtras()) {
                    displayMultiEditExtrasInventory = true; 
                    break; 
                }
            }
        }
        return displayMultiEditExtrasInventory;
    }

}
